const _levels=new Map([]);let _levelIndex=0;let _levelsMask=Number.MAX_SAFE_INTEGER;let _prefixLogCallback;const getMessageBody=(...rest)=>{if(_prefixLogCallback!=null)return[`[33m${_prefixLogCallback()}[0m`,...rest];return rest};const processArgs=(...rest)=>{let allow=true;const args=rest;const logLevel=args[0];const bit=_levels.get(logLevel);if(bit!=null){allow=(_levelsMask&bit)!==0;if(allow){args.splice(0,1,`[90m${logLevel} |[0m`)}}return{allow:allow,args:args}};const log=(...rest)=>{const{allow:allow,args:args}=processArgs(...rest);if(!allow)return;console.log.apply(null,getMessageBody(...args))};const error=(...rest)=>{const{allow:allow,args:args}=processArgs(...rest);if(!allow)return;console.error.apply(null,getMessageBody(...args))};const registerLevel=name=>{_levels.set(name,1<<_levelIndex);_levelIndex+=1};const registerLevels=names=>{names.forEach(registerLevel)};const setLevelsFromIndexes=(...rest)=>{_levelsMask=rest.reduce((prev,cur)=>prev|1<<cur,0)};const setMaxLevels=()=>{_levelsMask=Number.MAX_SAFE_INTEGER};const setLevels=(...rest)=>{};module.exports={log:log,error:error,registerLevel:registerLevel,registerLevels:registerLevels,setMaxLevels:setMaxLevels,setLevels:setLevels,setLevelsFromIndexes:setLevelsFromIndexes,set prefixLogCallback(value){_prefixLogCallback=value}};